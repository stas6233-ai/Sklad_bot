import logging
from datetime import datetime
from telegram.ext import Application, ConversationHandler, MessageHandler, CommandHandler, filters
from telegram.error import TelegramError
from config import BOT_TOKEN
from database import init_db, close_db, start_auto_backup, stop_auto_backup
from handlers import *
from keyboards import get_main_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
bot_start_time = None

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    try:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {context.error}", exc_info=context.error)
        
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if update and hasattr(update, 'message') and update.message:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")

async def post_init(application: Application):
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    global bot_start_time
    bot_start_time = datetime.now()
    logger.info(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ {bot_start_time}")

async def post_stop(application: Application):
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    close_db()

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    if not await auth_middleware(update, context):
        return
        
    global bot_start_time
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    cursor.execute('SELECT COUNT(*) FROM parts')
    parts_count = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM transactions')
    transactions_count = cursor.fetchone()[0]
    
    uptime = datetime.now() - bot_start_time if bot_start_time else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    status_message = (
        "ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
        f"‚Ä¢ –ó–∞–ø—É—â–µ–Ω: {bot_start_time}\n"
        f"‚Ä¢ –ê–ø—Ç–∞–π–º: {uptime}\n"
        f"‚Ä¢ –ó–∞–ø—á–∞—Å—Ç–µ–π –≤ –±–∞–∑–µ: {parts_count}\n"
        f"‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {transactions_count}\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(ALLOWED_USERS)}\n"
        f"‚Ä¢ –í–µ—Ä—Å–∏—è: 2.0\n"
        "‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
    )
    
    await update.message.reply_text(status_message)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        init_db()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
        
        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (—Ä–∞–∑ –≤ 24 —á–∞—Å–∞)
        start_auto_backup(interval_hours=24)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞...")
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # Conversation Handlers
        logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        
        conv_handler_add = ConversationHandler(
            entry_points=[MessageHandler(filters.Text(['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å']), add_part_start)],
            states={
                ADD_PART_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_part_name)],
                ADD_PART_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_part_number)],
                ADD_PART_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_part_quantity)],
                ADD_PART_UNIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_part_unit)],
                ADD_PART_MIN_STOCK: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_part_min_stock)],
            },
            fallbacks=[CommandHandler('cancel', cancel), MessageHandler(filters.Text(['‚ùå –û—Ç–º–µ–Ω–∞']), cancel)],
            name="add_part_conversation"
        )
        
        conv_handler_edit = ConversationHandler(
            entry_points=[MessageHandler(filters.Text(['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç—å']), edit_part_start)],
            states={
                EDIT_PART_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_part_select)],
                EDIT_PART_FIELD: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_part_field)],
                EDIT_PART_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_part_value)],
            },
            fallbacks=[CommandHandler('cancel', cancel), MessageHandler(filters.Text(['‚ùå –û—Ç–º–µ–Ω–∞']), cancel)],
            name="edit_part_conversation"
        )
        
        conv_handler_delete = ConversationHandler(
            entry_points=[MessageHandler(filters.Text(['üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å']), delete_part_start)],
            states={
                DELETE_PART_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_part_select)],
                DELETE_PART_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_part_confirm)],
            },
            fallbacks=[CommandHandler('cancel', cancel), MessageHandler(filters.Text(['‚ùå –û—Ç–º–µ–Ω–∞']), cancel)],
            name="delete_part_conversation"
        )
        
        conv_handler_incoming = ConversationHandler(
            entry_points=[MessageHandler(filters.Text(['üì¶ –ü—Ä–∏—Ö–æ–¥']), incoming_start)],
            states={
                INCOMING: [MessageHandler(filters.TEXT & ~filters.COMMAND, incoming_process)],
            },
            fallbacks=[CommandHandler('cancel', cancel), MessageHandler(filters.Text(['‚ùå –û—Ç–º–µ–Ω–∞']), cancel)],
            name="incoming_conversation"
        )
        
        conv_handler_outgoing = ConversationHandler(
            entry_points=[MessageHandler(filters.Text(['üì§ –†–∞—Å—Ö–æ–¥']), outgoing_start)],
            states={
                OUTGOING: [MessageHandler(filters.TEXT & ~filters.COMMAND, outgoing_process)],
            },
            fallbacks=[CommandHandler('cancel', cancel), MessageHandler(filters.Text(['‚ùå –û—Ç–º–µ–Ω–∞']), cancel)],
            name="outgoing_conversation"
        )
        
        conv_handler_search = ConversationHandler(
            entry_points=[MessageHandler(filters.Text(['üîç –ü–æ–∏—Å–∫']), search_start)],
            states={
                SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_process)],
            },
            fallbacks=[CommandHandler('cancel', cancel), MessageHandler(filters.Text(['‚ùå –û—Ç–º–µ–Ω–∞']), cancel)],
            name="search_conversation"
        )
        
        # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        conv_handler_add_user = ConversationHandler(
            entry_points=[MessageHandler(filters.Text(['‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']), add_user_start)],
            states={
                ADD_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_user_process)],
            },
            fallbacks=[CommandHandler('cancel', cancel), MessageHandler(filters.Text(['‚ùå –û—Ç–º–µ–Ω–∞']), cancel)],
            name="add_user_conversation"
        )
        
        conv_handler_remove_user = ConversationHandler(
            entry_points=[MessageHandler(filters.Text(['‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']), remove_user_start)],
            states={
                REMOVE_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, remove_user_process)],
            },
            fallbacks=[CommandHandler('cancel', cancel), MessageHandler(filters.Text(['‚ùå –û—Ç–º–µ–Ω–∞']), cancel)],
            name="remove_user_conversation"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("cancel", cancel))
        application.add_handler(CommandHandler("status", status_command))
        
        application.add_handler(conv_handler_add)
        application.add_handler(conv_handler_edit)
        application.add_handler(conv_handler_delete)
        application.add_handler(conv_handler_incoming)
        application.add_handler(conv_handler_outgoing)
        application.add_handler(conv_handler_search)
        application.add_handler(conv_handler_add_user)
        application.add_handler(conv_handler_remove_user)
        
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        application.post_init = post_init
        application.post_stop = post_stop
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        print("‚ÑπÔ∏è  –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status")
        print("üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
        print("‚ö†Ô∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        stop_auto_backup()
        close_db()
        logger.info("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == '__main__':
    main()
