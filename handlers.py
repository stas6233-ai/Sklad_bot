import logging
import os
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, CommandHandler, filters
from database import get_db_connection, backup_database
from keyboards import get_cancel_keyboard, get_main_keyboard, get_navigation_keyboard, get_users_management_keyboard, get_backup_keyboard
from auth import is_user_allowed, get_user_role, is_admin
from config import ALLOWED_USERS, ADMIN_USER_ID, ITEMS_PER_PAGE

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(ADD_PART_NAME, ADD_PART_NUMBER, ADD_PART_QUANTITY, ADD_PART_UNIT, 
 ADD_PART_MIN_STOCK, EDIT_PART_SELECT, EDIT_PART_FIELD, EDIT_PART_VALUE, 
 DELETE_PART_SELECT, DELETE_PART_CONFIRM, INCOMING, OUTGOING, SEARCH,
 ADD_USER, REMOVE_USER) = range(15)

async def auth_middleware(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤"""
    user_id = update.effective_user.id
    
    if not is_user_allowed(user_id):
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: {user_id}")
        if update.message:
            await update.message.reply_text(
                "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        return False
    
    context.user_data['role'] = get_user_role(user_id)
    return True

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await auth_middleware(update, context):
        return
    
    await update.message.reply_text(
        'üè≠ –ë–æ—Ç —É—á–µ—Ç–∞ –∑–∞–ø–∞—Å–Ω—ã—Ö —á–∞—Å—Ç–µ–π\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=get_main_keyboard()
    )

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await auth_middleware(update, context):
        return
        
    help_text = """
ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

üì¶ –ü—Ä–∏—Ö–æ–¥ - –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π
üì§ –†–∞—Å—Ö–æ–¥ - –æ—Ñ–æ—Ä–º–∏—Ç—å –≤—ã–¥–∞—á—É –∑–∞–ø—á–∞—Å—Ç–µ–π
üìä –û—Å—Ç–∞—Ç–∫–∏ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
üîç –ü–æ–∏—Å–∫ - –Ω–∞–π—Ç–∏ –∑–∞–ø—á–∞—Å—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–Ω–æ–º–µ—Ä—É
‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç—å - –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏
üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å - —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–∑ —Å–∏—Å—Ç–µ–º—ã
üìã –û—Ç—á–µ—Ç - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Å–∫–ª–∞–¥—É
üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º
üíæ –ë—ç–∫–∞–ø—ã - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏

‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ

üìù –§–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞:
‚Ä¢ –ü—Ä–∏—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥: "–ö–æ–¥ –¥–µ—Ç–∞–ª–∏ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
‚Ä¢ –ü–æ–∏—Å–∫: "–ù–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ"
"""
    await update.message.reply_text(help_text)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏
async def backup_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤—Ä—É—á–Ω—É—é"""
    if not await auth_middleware(update, context):
        return
    
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏.")
        return
    
    await update.message.reply_text("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    
    backup_file = backup_database()
    
    if backup_file:
        file_size = os.path.getsize(backup_file) / 1024
        await update.message.reply_text(
            f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìÅ –§–∞–π–ª: {os.path.basename(backup_file)}\n"
            f"üíæ –†–∞–∑–º–µ—Ä: {file_size:.1f} –ö–ë\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            reply_markup=get_backup_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.",
            reply_markup=get_backup_keyboard()
        )

async def backup_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –±—ç–∫–∞–ø–æ–≤"""
    if not await auth_middleware(update, context):
        return
    
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±—ç–∫–∞–ø–æ–≤.")
        return
    
    backup_dir = 'backups'
    if not os.path.exists(backup_dir):
        await update.message.reply_text(
            "üì≠ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
            reply_markup=get_backup_keyboard()
        )
        return
    
    backup_files = [f for f in os.listdir(backup_dir) if f.startswith('parts_backup_') and f.endswith('.db')]
    backup_files.sort(reverse=True)
    
    if not backup_files:
        await update.message.reply_text(
            "üì≠ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
            reply_markup=get_backup_keyboard()
        )
        return
    
    total_size = sum(os.path.getsize(os.path.join(backup_dir, f)) for f in backup_files) / 1024 / 1024
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –±—ç–∫–∞–ø–µ
    last_backup = backup_files[0]
    last_backup_size = os.path.getsize(os.path.join(backup_dir, last_backup)) / 1024
    last_backup_time = " ".join(last_backup.split('_')[2:4]).replace('.db', '')
    
    message = (
        f"üìä –°—Ç–∞—Ç—É—Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–ø–∏–π: {len(backup_files)}\n"
        f"‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.1f} –ú–ë\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ø–∏—è: {last_backup_time}\n"
        f"‚Ä¢ –†–∞–∑–º–µ—Ä: {last_backup_size:.1f} –ö–ë\n\n"
        f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–ø–∏–∏ –Ω–∞–∂–º–∏—Ç–µ 'üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø'"
    )
    
    await update.message.reply_text(message, reply_markup=get_backup_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
async def handle_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await auth_middleware(update, context):
        return
        
    text = update.message.text
    
    if text == '‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞':
        context.user_data['stock_page'] = context.user_data.get('stock_page', 2) - 1
        await show_stock(update, context)
    elif text == '‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞':
        context.user_data['stock_page'] = context.user_data.get('stock_page', 0) + 1
        await show_stock(update, context)
    elif text == 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await start(update, context)
    else:
        await handle_message(update, context)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
async def manage_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await auth_middleware(update, context):
        return
    
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.")
        return
    
    await update.message.reply_text(
        "üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_users_management_keyboard()
    )

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def show_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await auth_middleware(update, context):
        return
    
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    message = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for uid, username in ALLOWED_USERS.items():
        role = "üëë –ê–¥–º–∏–Ω" if uid == ADMIN_USER_ID else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        message += f"{role}: {username} (ID: {uid})\n"
    
    message += f"\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(ALLOWED_USERS)}"
    await update.message.reply_text(message, reply_markup=get_users_management_keyboard())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –Ω–∞—á–∞–ª–æ
async def add_user_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await auth_middleware(update, context):
        return ConversationHandler.END
    
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @userinfobot\n\n"
        "‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ",
        reply_markup=get_cancel_keyboard()
    )
    return ADD_USER

async def add_user_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel(update, context)
        return ConversationHandler.END
        
    try:
        new_user_id = int(update.message.text.strip())
        
        if new_user_id in ALLOWED_USERS:
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
            return ADD_USER
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ALLOWED_USERS[new_user_id] = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_{new_user_id}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
        update_env_file(new_user_id, None)
        
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.",
            reply_markup=get_users_management_keyboard()
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return ADD_USER
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    return ConversationHandler.END

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –Ω–∞—á–∞–ª–æ
async def remove_user_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await auth_middleware(update, context):
        return ConversationHandler.END
    
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    message = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    users_list = []
    
    for uid, username in ALLOWED_USERS.items():
        if uid != ADMIN_USER_ID:  # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞
            users_list.append([f"‚ûñ {username} (ID: {uid})"])
            message += f"üë§ {username} (ID: {uid})\n"
    
    if not users_list:
        await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_users_management_keyboard())
        return ConversationHandler.END
    
    users_list.append(['‚ùå –û—Ç–º–µ–Ω–∞'])
    reply_markup = ReplyKeyboardMarkup(users_list, resize_keyboard=True)
    
    await update.message.reply_text(
        message + "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )
    return REMOVE_USER

async def remove_user_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel(update, context)
        return ConversationHandler.END
        
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: "‚ûñ Username (ID: 123456789)")
        text = update.message.text
        if '(ID:' in text:
            user_id_str = text.split('(ID:')[1].split(')')[0].strip()
            user_id_to_remove = int(user_id_str)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return REMOVE_USER
        
        if user_id_to_remove == ADMIN_USER_ID:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return REMOVE_USER
        
        if user_id_to_remove not in ALLOWED_USERS:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
            return REMOVE_USER
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        removed_username = ALLOWED_USERS.pop(user_id_to_remove)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
        update_env_file(None, user_id_to_remove)
        
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {removed_username} (ID: {user_id_to_remove}) —É–¥–∞–ª–µ–Ω!\n\n"
            f"–¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.",
            reply_markup=get_users_management_keyboard()
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return REMOVE_USER
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞
def update_env_file(add_user_id: int = None, remove_user_id: int = None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª .env —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
        if os.path.exists('.env'):
            with open('.env', 'r') as f:
                lines = f.readlines()
        else:
            lines = []
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        current_ids = set()
        for line in lines:
            if line.startswith('ALLOWED_USER_IDS='):
                current_ids = set(int(uid.strip()) for uid in line.split('=', 1)[1].split(',') if uid.strip())
                break
        
        if add_user_id:
            current_ids.add(add_user_id)
        if remove_user_id and remove_user_id in current_ids:
            current_ids.remove(remove_user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        new_users_str = ','.join(str(uid) for uid in current_ids)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
        new_lines = []
        users_line_found = False
        
        for line in lines:
            if line.startswith('ALLOWED_USER_IDS='):
                new_lines.append(f'ALLOWED_USER_IDS={new_users_str}\n')
                users_line_found = True
            else:
                new_lines.append(line)
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
        if not users_line_found:
            new_lines.append(f'ALLOWED_USER_IDS={new_users_str}\n')
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open('.env', 'w') as f:
            f.writelines(new_lines)
            
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω .env —Ñ–∞–π–ª. –¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {new_users_str}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await auth_middleware(update, context):
        return
        
    text = update.message.text
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    if text in ['‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', '‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']:
        await handle_navigation(update, context)
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏
    elif text == 'üíæ –ë—ç–∫–∞–ø—ã':
        await update.message.reply_text(
            "üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_backup_keyboard()
        )
    elif text == 'üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø':
        await backup_command(update, context)
    elif text == 'üìä –°—Ç–∞—Ç—É—Å –±—ç–∫–∞–ø–æ–≤':
        await backup_status(update, context)
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    elif text == 'üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏':
        await manage_users(update, context)
    elif text == 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
        await show_users(update, context)
    elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
        await add_user_start(update, context)
    elif text == '‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
        await remove_user_start(update, context)
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    elif text == 'üì¶ –ü—Ä–∏—Ö–æ–¥':
        await incoming_start(update, context)
    elif text == 'üì§ –†–∞—Å—Ö–æ–¥':
        await outgoing_start(update, context)
    elif text == 'üìä –û—Å—Ç–∞—Ç–∫–∏':
        await show_stock(update, context)
    elif text == 'üîç –ü–æ–∏—Å–∫':
        await search_start(update, context)
    elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å':
        await add_part_start(update, context)
    elif text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç—å':
        await edit_part_start(update, context)
    elif text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å':
        await delete_part_start(update, context)
    elif text == 'üìã –û—Ç—á–µ—Ç':
        await generate_report(update, context)
    elif text == '‚ùì –ü–æ–º–æ—â—å':
        await help_command(update, context)
    elif text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel(update, context)
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ - –Ω–∞—á–∞–ª–æ
async def add_part_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await auth_middleware(update, context):
        return ConversationHandler.END
        
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:\n\n'
        '–ü—Ä–∏–º–µ—Ä: –ü–æ–¥—à–∏–ø–Ω–∏–∫ —à–∞—Ä–∏–∫–æ–≤—ã–π 6305\n\n'
        '‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ',
        reply_markup=get_cancel_keyboard()
    )
    return ADD_PART_NAME

async def add_part_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel(update, context)
        return ConversationHandler.END
        
    context.user_data['new_part'] = {'name': update.message.text.strip()}
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–µ—Ç–∞–ª–∏ (–∞—Ä—Ç–∏–∫—É–ª):\n\n'
        '–ü—Ä–∏–º–µ—Ä: 6305-2RS\n\n'
        '‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ'
    )
    return ADD_PART_NUMBER

async def add_part_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel(update, context)
        return ConversationHandler.END
        
    part_number = update.message.text.strip()
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM parts WHERE part_number = ?', (part_number,))
    existing_part = cursor.fetchone()
    
    if existing_part:
        await update.message.reply_text('‚ùå –ó–∞–ø—á–∞—Å—Ç—å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥:')
        return ADD_PART_NUMBER
    
    context.user_data['new_part']['part_number'] = part_number
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:\n\n'
        '–ü—Ä–∏–º–µ—Ä: 10\n\n'
        '‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ'
    )
    return ADD_PART_QUANTITY

async def add_part_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel(update, context)
        return ConversationHandler.END
        
    try:
        quantity = int(update.message.text.strip())
        context.user_data['new_part']['quantity'] = quantity
        
        keyboard = [['—à—Ç.', '–º', '–∫–≥', '—É–ø.'], ['‚ùå –û—Ç–º–µ–Ω–∞']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è:\n\n'
            '–ü—Ä–∏–º–µ—Ä: —à—Ç., –º, –∫–≥, —É–ø.\n\n'
            '‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ',
            reply_markup=reply_markup
        )
        return ADD_PART_UNIT
    except ValueError:
        await update.message.reply_text('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º! –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:')
        return ADD_PART_QUANTITY

async def add_part_unit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel(update, context)
        return ConversationHandler.END
        
    unit = update.message.text.strip()
    context.user_data['new_part']['unit'] = unit
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å (–ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è):\n\n'
        '–ü—Ä–∏–º–µ—Ä: 5\n\n'
        '‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ',
        reply_markup=get_cancel_keyboard()
    )
    return ADD_PART_MIN_STOCK

async def add_part_min_stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel(update, context)
        return ConversationHandler.END
        
    try:
        min_stock = int(update.message.text.strip())
        part_data = context.user_data['new_part']
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute(
            'INSERT INTO parts (name, part_number, quantity, unit, min_stock) VALUES (?, ?, ?, ?, ?)',
            (part_data['name'], part_data['part_number'], part_data['quantity'], 
             part_data['unit'], min_stock)
        )
        
        if part_data['quantity'] > 0:
            part_id = cursor.lastrowid
            cursor.execute(
                'INSERT INTO transactions (part_id, type, quantity) VALUES (?, ?, ?)',
                (part_id, 'incoming', part_data['quantity'])
            )
        
        conn.commit()
        
        await update.message.reply_text(
            f'‚úÖ –ó–∞–ø—á–∞—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n\n'
            f'üè∑Ô∏è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {part_data["name"]}\n'
            f'üî¢ –ö–æ–¥: {part_data["part_number"]}\n'
            f'üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {part_data["quantity"]} {part_data["unit"]}\n'
            f'‚ö†Ô∏è –ú–∏–Ω. –∑–∞–ø–∞—Å: {min_stock} {part_data["unit"]}',
            reply_markup=get_main_keyboard()
        )
        
        context.user_data.pop('new_part', None)
        
    except ValueError:
        await update.message.reply_text('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:')
        return ADD_PART_MIN_STOCK
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—á–∞—Å—Ç–∏: {e}")
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—á–∞—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
    
    return ConversationHandler.END

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ - –Ω–∞—á–∞–ª–æ
async def delete_part_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await auth_middleware(update, context):
        return ConversationHandler.END
        
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–µ—Ç–∞–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n'
        '–ü—Ä–∏–º–µ—Ä: 6305-2RS\n\n'
        '‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ',
        reply_markup=get_cancel_keyboard()
    )
    return DELETE_PART_SELECT

async def delete_part_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel(update, context)
        return ConversationHandler.END
        
    part_number = update.message.text.strip()
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM parts WHERE part_number = ?', (part_number,))
    part = cursor.fetchone()
    
    if not part:
        await update.message.reply_text('‚ùå –ó–∞–ø—á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥:')
        return DELETE_PART_SELECT
    
    context.user_data['delete_part'] = {
        'id': part[0],
        'name': part[1],
        'part_number': part[2],
        'quantity': part[3],
        'unit': part[4]
    }
    
    keyboard = [['‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f'‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å?\n\n'
        f'üè∑Ô∏è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {part[1]}\n'
        f'üî¢ –ö–æ–¥: {part[2]}\n'
        f'üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {part[3]} {part[4]}\n\n'
        '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!',
        reply_markup=reply_markup
    )
    return DELETE_PART_CONFIRM

async def delete_part_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å':
        await update.message.reply_text(
            '‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
            reply_markup=get_main_keyboard()
        )
        context.user_data.pop('delete_part', None)
        return ConversationHandler.END
        
    if update.message.text != '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å':
        await update.message.reply_text('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:')
        return DELETE_PART_CONFIRM
        
    part_data = context.user_data.get('delete_part')
    if not part_data:
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
        return ConversationHandler.END
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        cursor.execute('DELETE FROM transactions WHERE part_id = ?', (part_data['id'],))
        # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º—É –∑–∞–ø—á–∞—Å—Ç—å
        cursor.execute('DELETE FROM parts WHERE id = ?', (part_data['id'],))
        
        conn.commit()
        
        await update.message.reply_text(
            f'‚úÖ –ó–∞–ø—á–∞—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:\n\n'
            f'üè∑Ô∏è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {part_data["name"]}\n'
            f'üî¢ –ö–æ–¥: {part_data["part_number"]}\n'
            f'üì¶ –ë—ã–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: {part_data["quantity"]} {part_data["unit"]}',
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø—á–∞—Å—Ç–∏: {e}")
        await update.message.reply_text(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø—á–∞—Å—Ç–∏.',
            reply_markup=get_main_keyboard()
        )
    
    context.user_data.pop('delete_part', None)
    return ConversationHandler.END

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ - –Ω–∞—á–∞–ª–æ
async def edit_part_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await auth_middleware(update, context):
        return ConversationHandler.END
        
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n'
        '–ü—Ä–∏–º–µ—Ä: 6305-2RS\n\n'
        '‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        reply_markup=get_cancel_keyboard()
    )
    return EDIT_PART_SELECT

async def edit_part_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel(update, context)
        return ConversationHandler.END
        
    part_number = update.message.text.strip()
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM parts WHERE part_number = ?', (part_number,))
    part = cursor.fetchone()
    
    if not part:
        await update.message.reply_text('‚ùå –ó–∞–ø—á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥:')
        return EDIT_PART_SELECT
    
    context.user_data['edit_part'] = {
        'id': part[0],
        'name': part[1],
        'part_number': part[2],
        'quantity': part[3],
        'unit': part[4],
        'min_stock': part[7]
    }
    
    keyboard = [
        ['‚úèÔ∏è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '‚úèÔ∏è –ö–æ–¥'],
        ['‚úèÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '‚úèÔ∏è –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è'],
        ['‚úèÔ∏è –ú–∏–Ω. –∑–∞–ø–∞—Å', '‚ùå –û—Ç–º–µ–Ω–∞']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏:\n\n'
        f'üè∑Ô∏è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {part[1]}\n'
        f'üî¢ –ö–æ–¥: {part[2]}\n'
        f'üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {part[3]} {part[4]}\n'
        f'‚ö†Ô∏è –ú–∏–Ω. –∑–∞–ø–∞—Å: {part[7]} {part[4]}\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:',
        reply_markup=reply_markup
    )
    return EDIT_PART_FIELD

async def edit_part_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel(update, context)
        return ConversationHandler.END
        
    field = update.message.text.strip()
    part_data = context.user_data['edit_part']
    
    field_map = {
        '‚úèÔ∏è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': 'name',
        '‚úèÔ∏è –ö–æ–¥': 'part_number',
        '‚úèÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': 'quantity',
        '‚úèÔ∏è –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è': 'unit',
        '‚úèÔ∏è –ú–∏–Ω. –∑–∞–ø–∞—Å': 'min_stock'
    }
    
    if field not in field_map:
        await update.message.reply_text('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')
        return EDIT_PART_FIELD
    
    context.user_data['edit_field'] = field_map[field]
    
    current_value = part_data[field_map[field]]
    await update.message.reply_text(
        f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}\n\n'
        f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n\n'
        f'‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        reply_markup=get_cancel_keyboard()
    )
    return EDIT_PART_VALUE

async def edit_part_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel(update, context)
        return ConversationHandler.END
        
    try:
        field = context.user_data['edit_field']
        new_value = update.message.text.strip()
        part_data = context.user_data['edit_part']
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        if field in ['quantity', 'min_stock']:
            new_value = int(new_value)
        
        if field == 'part_number' and new_value != part_data['part_number']:
            cursor.execute('SELECT * FROM parts WHERE part_number = ?', (new_value,))
            if cursor.fetchone():
                await update.message.reply_text('‚ùå –ó–∞–ø—á–∞—Å—Ç—å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥:')
                return EDIT_PART_VALUE
        
        # –ë–ï–ó–û–ü–ê–°–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª–æ–≤–∞—Ä—è
        allowed_fields = {
            'name': 'name',
            'part_number': 'part_number', 
            'quantity': 'quantity',
            'unit': 'unit',
            'min_stock': 'min_stock'
        }
        
        if field not in allowed_fields:
            await update.message.reply_text('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!')
            return ConversationHandler.END
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        sql = f'UPDATE parts SET {allowed_fields[field]} = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?'
        cursor.execute(sql, (new_value, part_data['id']))
        
        if field == 'quantity':
            quantity_diff = new_value - part_data['quantity']
            if quantity_diff != 0:
                transaction_type = 'incoming' if quantity_diff > 0 else 'outgoing'
                cursor.execute(
                    'INSERT INTO transactions (part_id, type, quantity) VALUES (?, ?, ?)',
                    (part_data['id'], transaction_type, abs(quantity_diff))
                )
        
        conn.commit()
        
        await update.message.reply_text(
            f'‚úÖ –ó–∞–ø—á–∞—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n'
            f'–ü–æ–ª–µ "{field}" –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_value}',
            reply_markup=get_main_keyboard()
        )
        
        context.user_data.pop('edit_part', None)
        context.user_data.pop('edit_field', None)
        
    except ValueError:
        await update.message.reply_text('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')
        return EDIT_PART_VALUE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—á–∞—Å—Ç–∏: {e}")
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.')
    
    return ConversationHandler.END

# –ü—Ä–∏—Ö–æ–¥ –∑–∞–ø—á–∞—Å—Ç–µ–π
async def incoming_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await auth_middleware(update, context):
        return ConversationHandler.END
        
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥–∞:\n'
        '–ö–æ–¥ –¥–µ—Ç–∞–ª–∏ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n\n'
        '–ü—Ä–∏–º–µ—Ä: 6305-2RS | 10\n\n'
        '‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–∏—Ö–æ–¥',
        reply_markup=get_cancel_keyboard()
    )
    return INCOMING

async def incoming_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel(update, context)
        return ConversationHandler.END
        
    try:
        data = update.message.text.split('|')
        if len(data) < 2:
            await update.message.reply_text('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ö–æ–¥ –¥–µ—Ç–∞–ª–∏ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            return INCOMING
        
        part_number = data[0].strip()
        quantity = int(data[1].strip())
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM parts WHERE part_number = ?', (part_number,))
        part = cursor.fetchone()
        
        if not part:
            await update.message.reply_text('‚ùå –ó–∞–ø—á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
            return INCOMING
        
        new_quantity = part[3] + quantity
        cursor.execute(
            'UPDATE parts SET quantity = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',
            (new_quantity, part[0])
        )
        
        cursor.execute(
            'INSERT INTO transactions (part_id, type, quantity) VALUES (?, ?, ?)',
            (part[0], 'incoming', quantity)
        )
        
        conn.commit()
        
        await update.message.reply_text(
            f'‚úÖ –ü—Ä–∏—Ö–æ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω:\n'
            f'–ó–∞–ø—á–∞—Å—Ç—å: {part[1]}\n'
            f'–ö–æ–¥: {part[2]}\n'
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: +{quantity} {part[4]}\n'
            f'–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {new_quantity} {part[4]}',
            reply_markup=get_main_keyboard()
        )
        
    except ValueError:
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!')
        return INCOMING
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Ö–æ–¥–µ: {e}")
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—Ö–æ–¥–∞.')
    
    return ConversationHandler.END

# –†–∞—Å—Ö–æ–¥ –∑–∞–ø—á–∞—Å—Ç–µ–π
async def outgoing_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await auth_middleware(update, context):
        return ConversationHandler.END
        
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞:\n'
        '–ö–æ–¥ –¥–µ—Ç–∞–ª–∏ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n\n'
        '–ü—Ä–∏–º–µ—Ä: 6305-2RS | 2\n\n'
        '‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Ö–æ–¥',
        reply_markup=get_cancel_keyboard()
    )
    return OUTGOING

async def outgoing_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel(update, context)
        return ConversationHandler.END
        
    try:
        data = update.message.text.split('|')
        if len(data) < 2:
            await update.message.reply_text('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ö–æ–¥ –¥–µ—Ç–∞–ª–∏ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            return OUTGOING
        
        part_number = data[0].strip()
        quantity = int(data[1].strip())
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM parts WHERE part_number = ?', (part_number,))
        part = cursor.fetchone()
        
        if not part:
            await update.message.reply_text('‚ùå –ó–∞–ø—á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
            return OUTGOING
        
        if part[3] < quantity:
            await update.message.reply_text(
                f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ!\n'
                f'–ó–∞–ø—á–∞—Å—Ç—å: {part[1]}\n'
                f'–î–æ—Å—Ç—É–ø–Ω–æ: {part[3]} {part[4]}\n'
                f'–¢—Ä–µ–±—É–µ—Ç—Å—è: {quantity} {part[4]}'
            )
            return OUTGOING
        
        new_quantity = part[3] - quantity
        cursor.execute(
            'UPDATE parts SET quantity = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',
            (new_quantity, part[0])
        )
        
        cursor.execute(
            'INSERT INTO transactions (part_id, type, quantity) VALUES (?, ?, ?)',
            (part[0], 'outgoing', quantity)
        )
        
        conn.commit()
        
        await update.message.reply_text(
            f'‚úÖ –†–∞—Å—Ö–æ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω:\n'
            f'–ó–∞–ø—á–∞—Å—Ç—å: {part[1]}\n'
            f'–ö–æ–¥: {part[2]}\n'
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: -{quantity} {part[4]}\n'
            f'–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {new_quantity} {part[4]}',
            reply_markup=get_main_keyboard()
        )
        
    except ValueError:
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!')
        return OUTGOING
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Ö–æ–¥–µ: {e}")
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å—Ö–æ–¥–∞.')
    
    return ConversationHandler.END

# –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π
async def search_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await auth_middleware(update, context):
        return ConversationHandler.END
        
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n'
        '‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫',
        reply_markup=get_cancel_keyboard()
    )
    return SEARCH

async def search_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel(update, context)
        return ConversationHandler.END
        
    search_term = update.message.text.strip()
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute(
        'SELECT * FROM parts WHERE name LIKE ? OR part_number LIKE ?',
        (f'%{search_term}%', f'%{search_term}%')
    )
    parts = cursor.fetchall()
    
    if not parts:
        await update.message.reply_text('üîç –ó–∞–ø—á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', reply_markup=get_main_keyboard())
    else:
        message = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
        for part in parts:
            status = "‚ö†Ô∏è " if part[3] <= part[7] else "‚úÖ "
            message += f"{status}{part[1]} ({part[2]}): {part[3]} {part[4]}\n"
        
        await update.message.reply_text(message, reply_markup=get_main_keyboard())
    
    return ConversationHandler.END

# –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏
async def show_stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await auth_middleware(update, context):
        return
        
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('SELECT COUNT(*) FROM parts')
    total_count = cursor.fetchone()[0]
    
    if total_count == 0:
        await update.message.reply_text('üì≠ –ù–µ—Ç –∑–∞–ø—á–∞—Å—Ç–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é
    page = context.user_data.get('stock_page', 1)
    offset = (page - 1) * ITEMS_PER_PAGE
    
    cursor.execute('SELECT * FROM parts ORDER BY name LIMIT ? OFFSET ?', (ITEMS_PER_PAGE, offset))
    parts = cursor.fetchall()
    
    total_pages = (total_count + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    message = f"üìä –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ (—Å—Ç—Ä. {page}/{total_pages})\n\n"
    
    for part in parts:
        status = "‚ö†Ô∏è " if part[3] <= part[7] else "‚úÖ "
        message += f"{status}{part[1]} ({part[2]}): {part[3]} {part[4]}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if total_count > ITEMS_PER_PAGE:
        has_prev = page > 1
        has_next = page < total_pages
        
        reply_markup = get_navigation_keyboard(has_prev, has_next)
        await update.message.reply_text(message, reply_markup=reply_markup)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        context.user_data['stock_page'] = page
    else:
        await update.message.reply_text(message, reply_markup=get_main_keyboard())

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
async def generate_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await auth_middleware(update, context):
        return
        
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM parts WHERE quantity <= min_stock ORDER BY quantity')
    low_stock = cursor.fetchall()
    
    cursor.execute('SELECT COUNT(*), SUM(quantity) FROM parts')
    total_parts, total_quantity = cursor.fetchone()
    
    message = "üìã –û—Ç—á–µ—Ç –ø–æ —Å–∫–ª–∞–¥—É\n\n"
    message += f"–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {total_parts}\n"
    message += f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_quantity or 0} —à—Ç.\n\n"
    
    if low_stock:
        message += "‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫:\n"
        for part in low_stock:
            message += f"{part[1]} ({part[2]}): {part[3]}/{part[7]} {part[4]}\n"
    else:
        message += "‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–æ—Ä–º–µ"
    
    await update.message.reply_text(message)

# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END
